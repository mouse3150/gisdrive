<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	<http create-session="stateless" use-expressions="true" access-decision-manager-ref="accessDecisionManager" entry-point-ref="CustomAuthenticationEntryPoint">
		<anonymous enabled="false"/> 
		<intercept-url pattern="/index.jsp" access="isAuthenticated()" />
		<form-login login-page="/login.html" default-target-url="/index.html" />
		<logout logout-success-url="/index.html" />
		<custom-filter ref="authenticationTokenProcessingFilter" before="FORM_LOGIN_FILTER" />
		<custom-filter ref="licenceFilter" before="FIRST" />
		<custom-filter ref="systemFilter" after="FIRST" />
	</http>
	
	<global-method-security pre-post-annotations="enabled"/>
	
	<beans:bean id="licenceFilter" class="cn.com.esrichina.gcloud.commons.LicenseFilter" />
	
	<beans:bean id="systemFilter" class="cn.com.esrichina.gcloud.commons.SystemFilter" />
  
  	<beans:bean id="authenticationTokenProcessingFilter" class="cn.com.esrichina.gcloud.security.setting.AuthenticationTokenProcessingFilter"></beans:bean>
  
  	<beans:bean id="CustomAuthenticationEntryPoint" class="cn.com.esrichina.gcloud.security.setting.CustomAuthenticationEntryPoint" ></beans:bean>
  
	<beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check" />
	</beans:bean>
	
	
	<beans:bean id="gcloudDaoAuthenticationProvider" class="cn.com.esrichina.gcloud.security.setting.GCloudDaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userService" />
		<beans:property name="hideUserNotFoundExceptions" value="false" />
	</beans:bean>
	
	<beans:bean id="gcloudLDAPAuthenticationProvider" class="cn.com.esrichina.gcloud.security.setting.GCloudLDAPAuthenticationProvider">
		<beans:property name="userService" ref="userService" />
		<beans:property name="ldapBaseStore" ref="ldapBaseStore" />
	</beans:bean>
	
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	
	<beans:bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<beans:property name="providers">
			<beans:list>
				<beans:ref local="gcloudDaoAuthenticationProvider" />
				<beans:ref local="gcloudLDAPAuthenticationProvider" />
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<authentication-manager>
		<authentication-provider user-service-ref="userService">
			<password-encoder hash="md5"></password-encoder>
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:property name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter">
					<beans:property name="rolePrefix" value="AUTH_" />
				</beans:bean>
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />
	
	<!--
	<authentication-manager>
		<authentication-provider ref="ldapAuthProvider"></authentication-provider>
	</authentication-manager>
	<beans:bean id="contextSource"
		class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<beans:constructor-arg value="ldap://localhost:389/dc=javali,dc=org" />
		<beans:property name="userDn" value="manager@javali.org" />
		<beans:property name="password" value="******" />
	</beans:bean>
	<beans:bean id="ldapAuthProvider"
		class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<beans:constructor-arg>
			<beans:bean
				class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<beans:constructor-arg ref="contextSource" />
				<beans:property name="userSearch">
					<beans:bean
						class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
						<beans:constructor-arg value="dc=javali,dc=org" />
						<beans:constructor-arg value="(sAMAccountName={0})" />
						<beans:constructor-arg ref="contextSource" />
					</beans:bean>
				</beans:property>
			</beans:bean>
		</beans:constructor-arg>
		<beans:constructor-arg>
			<beans:bean id="ldapAuthoritiesPopulator"
				class="org.javali.security.ext.MyLdapAuthoritiesPopulator">
				<beans:constructor-arg ref="contextSource" />
				<beans:constructor-arg value="ou=Groups,dc=javali,dc=org" />
			</beans:bean>
		</beans:constructor-arg>
		<beans:property name="userDetailsContextMapper">
			<beans:bean id="ldapUserDetailsMapper"
				class="org.springframework.security.ldap.userdetails.LdapUserDetailsMapper">
				<beans:property name="rolePrefix" value="ROLE_" />
				<beans:property name="convertToUpperCase" value="true" />
			</beans:bean>
		</beans:property>
	</beans:bean>
	-->
</beans:beans>